/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.icthh.xm.tmf.ms.customer.api.v31;

import com.icthh.xm.tmf.ms.customer.model.v31.Customer;
import com.icthh.xm.tmf.ms.customer.model.v31.Error;
import java.util.List;
import com.icthh.xm.tmf.ms.customer.model.v31.PatchOperation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-14T10:50:34.814388773+02:00[Europe/Kyiv]")
@Validated
@Tag(name = "CustomerV31", description = "the CustomerV31 API")
public interface CustomerV31Api {

    default CustomerV31ApiDelegate getDelegate() {
        return new CustomerV31ApiDelegate() {};
    }

    /**
     * PATCH /customer/{id} : Updates partially a &#39;Customer&#39;
     *
     * @param id Identifier of the Customer (required)
     * @param operations A list of Customer patch operations (required)
     * @return Updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "patchCustomer",
        summary = "Updates partially a 'Customer'",
        tags = { "customer v3.1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Customer.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/customer/{id}",
        produces = { "application/json" },
        consumes = { "application/json-patch+json" }
    )
    default ResponseEntity<Customer> patchCustomer(
        @Parameter(name = "id", description = "Identifier of the Customer", required = true, schema = @Schema(description = "")) @PathVariable("id") String id,
        @Parameter(name = "operations", description = "A list of Customer patch operations", required = true, schema = @Schema(description = "")) @Valid @RequestBody List<PatchOperation> operations
    ) {
        return getDelegate().patchCustomer(id, operations);
    }

}
