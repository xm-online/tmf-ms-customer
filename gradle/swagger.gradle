/*
 * Plugin that provides API-first development using OpenAPI-generator to
 * generate Spring-MVC endpoint stubs at compile time from an OpenAPI definition file
 */
apply plugin: "org.openapi.generator"
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:${openapi_plugin_version}"
    }
}

void createOpenApiGenerateTask(String ymlName) {
    String taskName = "openApiGenerate_" + ymlName;
    task(taskName, type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "spring"
        inputSpec = "$rootDir/src/main/resources/swagger/${ymlName}.yml".toString()
        outputDir = "$buildDir/openapi".toString()
        if (ymlName.contains("v3.1")) {
            apiPackage = "com.icthh.xm.tmf.ms.customer.api.v31"
            modelPackage = "com.icthh.xm.tmf.ms.customer.model.v31"
        } else {
            apiPackage = "com.icthh.xm.tmf.ms.customer.api"
            modelPackage = "com.icthh.xm.tmf.ms.customer.model"
        }
        apiFilesConstrainedTo = [""]
        modelFilesConstrainedTo = [""]
        supportingFilesConstrainedTo = ["ApiUtil.java"]
        configOptions = [delegatePattern: "true", title: "customer"]
        validateSpec = true
        importMappings = [Problem: "org.zalando.problem.Problem"]
        additionalProperties = [useTags: "true"]
    }
    compileJava.dependsOn(taskName)
}

String[] apiYmlNames = [
    "api",
    "api-extension",
    "api_v3.1",
    "api_v3.1-extension"
]

for (String ymlName : apiYmlNames) {
    createOpenApiGenerateTask(ymlName);
}

sourceSets {
    main {
        java {
            srcDir file("${project.buildDir.path}/openapi/src/main/java")
        }
    }
}
